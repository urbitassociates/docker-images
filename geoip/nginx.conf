#user nginx;
worker_processes auto;
error_log /usr/local/openresty/nginx/logs/error.log;

events {
    worker_connections 66536;
    use epoll;
    multi_accept on;
}

include /usr/share/nginx/modules/*.conf;

http {

    gzip on;
    gzip_min_length 1000;
    gzip_disable "MSIE [1-6]\.";

    access_log /usr/local/openresty/nginx/logs/access.log;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /usr/local/openresty/nginx/conf/mime.types;
    default_type        application/octet-stream;
    include /usr/local/openresty/nginx/conf.d/*.conf;

    index   index.html index.htm;

    server {
        listen       80 default_server;
        server_name  localhost;
        root         /usr/share/nginx/html;

        include /usr/local/openresty/nginx/conf.d/*.conf;

        location /ip-addr {
            add_header Content-Type application/json;
            return 200 '{"ip" : "$remote_addr"}';
        }

        location /client-info {
            add_header Content-Type application/json;
            return 200 '{"ip" : "$remote_addr", "referrer" : "$http_referrer", "user_agent" : "$http_user_agent"}';
        }

        location /proxy {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_pass http://0.0.0.0:5000/$remote_addr;
        }

        location / {

        if ($request_method = 'OPTIONS') {
            return 204;
            add_header 'Access-Control-Allow-Methods' 'GET';
            add_header 'Access-Control-Allow-Headers' 'X-Urbit-StoreId,X-Urbit-Marketid,Keep-Alive,User-Agent,Content-Type';
        }
        add_header 'Access-Control-Allow-Origin' '*';
        add_header Content-Type application/json;
        proxy_set_header Host $host;
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            content_by_lua_block {
                require("os")
                local cjson = require "cjson"
                local res = ngx.location.capture("/proxy" )
                local value=cjson.new().decode(res.body)
                local t = {lat = value.Data.Location.Latitude,
                    lon = value.Data.Location.Longitude,
                    city = value.Data.City.Names.en}
                local value=cjson.encode(t)
                ngx.say(value)
            }
        }
    }
}
